import * as waiter from '@waiter/factory';

import { IAction as IAuthorizeAction, IAttributes as IAuthorizeActionAttributes } from '../action/authorize';
import { IAttributes as IMoneyTransferActionAttributes, IPaymentCard } from '../action/transfer/moneyTransfer';
import { IExtendId } from '../autoGenerated';
import { OrderType } from '../order';
import { IProject } from '../organization/project';
import { IPerson } from '../person';
import * as TransactionFactory from '../transaction';
import TransactionType from '../transactionType';

import * as chevre from '../../chevre';

export type IAgent = IPerson;
export type IRecipient = IPerson | TransactionFactory.ISeller;
export import ISeller = TransactionFactory.ISeller;

/**
 * トークン化されたペイメントカードンターフェース
 */
export type ITokenizedPaymentCard = string;
/**
 * 転送元としての注文インターフェース
 */
export interface IOrderAsFromLocation {
    typeOf: OrderType;
    confirmationNumber: string;
    orderNumber: string;
}
export type IFromLocationBeforeStart = IOrderAsFromLocation | IPaymentCard | ITokenizedPaymentCard;
export type IFromLocation = IPaymentCard;
// export type IToLocation = IPaymentCard | IAnonymousLocation;
export type IToLocation = IPaymentCard;

export interface IObjectPendingTransaction {
    typeOf?: chevre.transactionType.MoneyTransfer;
    id?: string;
    transactionNumber?: string;
    identifier?: string;
}

export interface IStartParamsWithoutDetail {
    project: IProject;
    /**
     * 取引期限
     */
    expires: Date;
    /**
     * 転送人
     */
    agent: IAgent;
    /**
     * 受取人
     */
    recipient: IRecipient;
    seller: {
        id: string;
    };
    /**
     * 転送内容
     */
    object: {
        passport?: TransactionFactory.IPassportBeforeStart;
        /**
         * 金額
         */
        amount: chevre.monetaryAmount.IMonetaryAmount;
        /**
         * 転送元
         */
        fromLocation: IFromLocationBeforeStart;
        /**
         * 転送先
         */
        toLocation: IToLocation;
        /**
         * 取引説明
         */
        description?: string;
        pendingTransaction?: IObjectPendingTransaction;
    };
}

/**
 * 取引開始パラメーターインターフェース
 */
export interface IStartParams extends TransactionFactory.IStartParams<TransactionType.MoneyTransfer, IAgent, IRecipient, IObject> {
    /**
     * 転送先
     */
    recipient: IRecipient;
    /**
     * 販売者
     */
    seller: ISeller;
}

export type IResult = any;

/**
 * エラーインターフェース
 */
export type IError = any;

/**
 * 取引対象物インターフェース
 */
export interface IObject {
    /**
     * 金額
     */
    amount: chevre.monetaryAmount.IMonetaryAmount;
    /**
     * 転送元
     */
    fromLocation: IFromLocation;
    /**
     * 転送先
     */
    toLocation: IToLocation;
    /**
     * 取引説明
     */
    description?: string;
    pendingTransaction?: IObjectPendingTransaction;
    /**
     * WAITER許可証
     */
    passport?: waiter.passport.IPassport;
    /**
     * 承認アクションリスト
     */
    authorizeActions: IAuthorizeAction<IAuthorizeActionAttributes<any, any>>[];
}

export interface IPotentialActions {
    /**
     * 通貨転送アクション
     */
    moneyTransfer: IMoneyTransferActionAttributes[];
}

export type ITransaction = IExtendId<IAttributes>;

/**
 * 転送取引インターフェース
 */
export interface IAttributes extends TransactionFactory.IAttributes<IStartParams, IResult, IError, IPotentialActions> {
}

export interface ISearchConditions extends TransactionFactory.ISearchConditions<TransactionType.MoneyTransfer> {
    seller?: {
        ids?: string[];
    };
    object?: {
    };
    potentialActions?: {
    };
    result?: {
    };
}
