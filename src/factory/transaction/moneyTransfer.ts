import * as pecorino from '@pecorino/factory';

import AccountType from '../accountType';
import { IAction as IAuthorizeAction, IAttributes as IAuthorizeActionAttributes } from '../action/authorize';
import { IAccount, IAnonymousLocation, IAttributes as IMoneyTransferActionAttributes } from '../action/transfer/moneyTransfer';
import { IExtendId } from '../autoGenerated';
import OrganizationType from '../organizationType';
import { IPerson } from '../person';
import { IProject } from '../project';
import * as TransactionFactory from '../transaction';
import TransactionType from '../transactionType';

export type IAgent = IPerson;

export type IRecipient = IPerson | TransactionFactory.ISeller;

export import ISeller = TransactionFactory.ISeller;

export interface IStartParamsWithoutDetail<T extends AccountType, T2 extends IToLocationType> {
    project: IProject;
    /**
     * 取引期限
     */
    expires: Date;
    /**
     * 転送人
     */
    agent: IAgent;
    /**
     * 受取人
     */
    recipient: IRecipient;
    seller: {
        typeOf: OrganizationType;
        id: string;
    };
    /**
     * 転送内容
     */
    object: IObject<T, T2>;
}

/**
 * 取引開始パラメーターインターフェース
 */
export interface IStartParams<T extends AccountType, T2 extends IToLocationType>
    extends TransactionFactory.IStartParams<TransactionType.MoneyTransfer, IAgent, IRecipient, IObject<T, T2>> {
    /**
     * 転送先
     */
    recipient: IRecipient;
    /**
     * 販売者
     */
    seller: ISeller;
}

export type IResult = any;

/**
 * エラーインターフェース
 */
export type IError = any;

export type IToLocationType = pecorino.account.TypeOf.Account | string;
export type IFromLocation<T extends AccountType> = IAccount<T>;
export type IToLocation<T extends AccountType, T2 extends IToLocationType> =
    T2 extends pecorino.account.TypeOf.Account ? IAccount<T> :
    IAnonymousLocation;

/**
 * 取引対象物インターフェース
 */
export interface IObject<T extends AccountType, T2 extends IToLocationType> {
    /**
     * 金額
     */
    amount: number;
    /**
     * 転送元
     */
    fromLocation: IFromLocation<T>;
    /**
     * 転送先
     */
    toLocation: IToLocation<T, T2>;
    /**
     * 取引説明
     */
    description?: string;
    /**
     * 承認アクションリスト
     */
    authorizeActions: IAuthorizeAction<IAuthorizeActionAttributes<any, any>>[];
}

export interface IPotentialActions<T extends AccountType> {
    /**
     * 通貨転送アクション
     */
    moneyTransfer: IMoneyTransferActionAttributes<T>[];
}

export type ITransaction<T extends AccountType, T2 extends IToLocationType> = IExtendId<IAttributes<T, T2>>;

/**
 * 転送取引インターフェース
 */
export interface IAttributes<T extends AccountType, T2 extends IToLocationType>
    extends TransactionFactory.IAttributes<IStartParams<T, T2>, IResult, IError, IPotentialActions<T>> {
}

export interface ISearchConditions extends TransactionFactory.ISearchConditions<TransactionType.MoneyTransfer> {
    seller?: {
        typeOf?: OrganizationType;
        ids?: string[];
    };
    object?: {
    };
    potentialActions?: {
    };
    result?: {
    };
}
